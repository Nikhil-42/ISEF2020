import utils
import numba
import datetime
import itertools
import numpy as np
from numba import njit, prange
from numba.typed import List
from homebrew.network import JIT_Network, clone

@njit
def spawn_population(population_size, input_shape, output_shape, node_count):
    population = List()
    
    for j in range(population_size):
        new_net = JIT_Network(input_shape, output_shape, node_count, np.random.random()/node_count, j)
        node_count = new_net.node_count
        for node in range(1, output_shape+1):
            to_node = node_count-node
            while input_shape <= to_node:
                from_node = to_node - np.random.randint(low=node_count/10, high=node_count/2+1)
                if from_node < 0:
                    from_node = np.random.randint(low=0, high=input_shape)
                new_net.add_connection(to_node, from_node)
                to_node = from_node
        connections = np.random.randint(0, high=node_count, size=(2, (node_count**2)/2)).astype(numba.int32)
        new_net.add_connections(connections[0], connections[1])
        population.append(new_net)
    return population

@njit
def evaluation(x, y, val_x, val_y, compare, population):
    fitnesses = np.empty(shape=len(population), dtype=numba.float64)
    for j, network in enumerate(population):
        traits = network.train(x, y, 1, 1000, 0.001)
        if np.isnan(traits) or len(network.connections) == 0:
            fitnesses[j] = -1
        else:
            val = network.validate(val_x, val_y, compare)
            fitnesses[j] = (val**int(network.node_count/2+10))/len(network.connections)
    return fitnesses

@njit
def selection(num_pairs, fitnesses, population):
    population_size = len(population)

    rank_list = np.empty_like(fitnesses, dtype=np.int32)
    rank_sum = np.sum(np.arange(1, population_size+1))

    pairs = np.empty((num_pairs, 2), dtype=np.int32)
    pairs.fill(-1)
    parents = np.random.random((num_pairs, 2)) * rank_sum
    rank_list = fitnesses.argsort()[::-1]
    for p in range(num_pairs):
        for j in range(2):
            counter = 0
            prob = 0
            while parents[p, j] > prob and counter < len(rank_list):
                prob += population_size-counter
                if pairs[p, 0] == rank_list[counter]:
                    counter += 1
                counter += 1
            pairs[p, j] = rank_list[counter-1]

    return pairs

@njit
def recombination(input_shape, output_shape, pairs, population):
    # print("Starting Recombination")
    new_networks = List()
    # print(pairs, population)
    for i in range(len(pairs)): # Using each of the pairs generated by the rank selection
        # print(pairs[i])
        mom = population[pairs[i, 0]] # Set one parent as the mom
        dad = population[pairs[i, 1]] # And one as the dad
        connections = mom.connections | dad.connections # Merge their connections
        # print(connections)
        if len(connections)>0:  
            for j in range(np.random.randint(0, len(connections))):
                connections.pop() # And discard a random number of them
        # print(connections)
        new_net = JIT_Network(input_shape, output_shape, mom.node_count, 0.5*(mom.learning_rate+dad.learning_rate), mom.id+dad.id) 
        new_net.set_connections(connections) #Set the child's learning rate to be the average of the parents
        # print(new_net.learning_rate)
        for connection in connections:
            if connection in mom.connections:
                new_net.set_weight(connection, mom.get_weight(connection)) # Make sure the weights are carried with each connections
            else:
                new_net.set_weight(connection, dad.get_weight(connection))
        new_networks.append(new_net)
    return new_networks

@njit
def mutation(population, mutations):
    mutated = List()

    for rand in np.random.random(mutations):
        mutated.append(np.random.randint(low=0, high=len(population)))
        network = population[mutated[-1]]
        if rand < 0.30:
            network.add_connection(np.random.randint(network.input_shape, network.node_count), np.random.randint(0, network.node_count-network.output_shape))
        if rand < np.random.random():
            network.learning_rate += (rand-0.5)/network.node_count
    return mutated

@njit
def competition(fitnesses, population, new_fitnesses, new_networks):
    for i, new_net in enumerate(new_networks):
        rank_list = fitnesses.argsort()
        if new_fitnesses[i] > fitnesses[rank_list[0]]:
            fitnesses[rank_list[0]] = new_fitnesses[i]
            population[rank_list[0]] = new_net

@njit(parallel=True)
def evolution(x, y, val_x, val_y, compare, population_size, node_count, generations):
    population = spawn_population(population_size, x.shape[1], y.shape[1], node_count)

    fitnesses = evaluation(x, y, val_x, y, compare, population)
    best_fitness = fitnesses.max()
    best_network = clone(population[fitnesses.argsort()[-1]])
    print(fitnesses.max(), best_fitness)
    for i in range(generations):
        mutated = mutation(population, int(population_size*0.075))
        # print("Completed Mutation")
        mutation_fitnesses = evaluation(x, y, val_x, val_y, compare, [population[mutate] for mutate in mutated])
        #print("Complete Evaluation")
        for j in prange(len(mutated)):
            fitnesses[mutated[j]] = mutation_fitnesses[j]
        pairs = selection(int(population_size*0.15), fitnesses, population)
        # print("Completed Selection")
        new_networks = recombination(x.shape[1], y.shape[1], pairs, population)
        # print("Completed Recombination")
        new_fitnesses = evaluation(x, y, val_x, val_y, compare, new_networks)
        #print("Completed Evaluation New")
        competition(fitnesses, population, new_fitnesses, new_networks)
        print("Generation #", i, " Max Fitness:", fitnesses.max())
        if fitnesses.max() > best_fitness:
            print("New Best Fitness")
            best_fitness = fitnesses.max()
            best_network = clone(population[fitnesses.argsort()[-1]])

    accuracy = best_network.validate(x, y, compare)
    print("Accuracy: ", accuracy*100,"%")
    return best_network, best_fitness, accuracy

@njit
def evolve_node_count(x, y, val_x, val_y, compare, population_count, population_size, node_cap, generations, target_accuracy, r):
    np.random.seed(r)

    best_fitness = 0
    best_network = None

    node_floor = x.shape[1]+y.shape[1]+1

    for i in range(population_count):
        node_count = np.random.randint(node_floor, node_cap)
        print("Population:" ,i, " Node Count:", node_count)
        network, fitness, accuracy = evolution(x, y, val_x, val_y, compare, population_size, node_count, generations)
        if accuracy >= target_accuracy:
            if fitness > best_fitness:
                print("Replaced ", best_fitness, " with ", fitness)
                node_cap = min(node_cap, node_count)
                best_fitness = fitness
                best_network = network
            if node_count == node_floor:
                node_floor -= int(node_count/4)
        else:
            node_floor += int(0.5 * (node_count-node_floor)) + 1
        
        print(node_floor, "<= node_count <", node_cap)
        if node_cap==node_floor:
            break

    print("Node Count:", best_network.node_count)
    print("Weighted Connections:")
    for c in best_network.connections:
        print(c,':', best_network.weights[c])
    return best_network

if __name__ == "__main__":
    np.random.seed(0)

    x = np.array([[1, 0] if rand < 0.25 else [0, 1] if rand < 0.5 else [1, 1] if rand < 0.75 else [0,0] for rand in np.random.random(60000)], dtype=int)
    y = np.array([[1,] if np.sum(itm)==1 else [0,] for itm in x], dtype=int)

    with utils.OutSplit('xor_evolution_test'):
        # network, fitness, accuracy = evolution(x, y, x, y, utils.jit_round_compare, 30, 4, 50)
        # print(fitness, accuracy, network.validate(x, y, utils.jit_round_compare))
        best_xor = evolve_node_count(x, y, x, y, utils.jit_round_compare, population_count=30, population_size=15, node_cap=50, generations=100, target_accuracy=1, r=2)
        best_xor.predict(np.array([[0, 1], [1, 1], [0, 0], [1, 0]]))